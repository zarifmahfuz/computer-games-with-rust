State
MAX = 1;
MIN = -MAX;
EMPTY = 0;  // value for empty cell
row = m;
cols = n;
size = rows * cols;
disp = { 'o', '-', 'x' };       // how pieces are displayed; min - empty - max

to_move: i64;   // whose turn is it to move
filled: i64;    // number of non-empty squares
declare 2d vector grid of size mxn, initialized with values EMPTY;

in the constructor, initialize to_move = MAX and filled = 0;

METHOD - done
int max_value()
return MAX if MAX won, MIN if MIN won, and 0 otherwise
logic -

METHOD - done
bool make_move(x, y)
make move (x, y) for player to_move (including board change, filled, and
to_move changes) and return true if and only if move is legal
if the move is illegal, the state should not be changed
pre-condition: x, y within range

METHOD - done
int get_to_move()
return player to_move

METHOD - done?
for each game state, #possibilites to insert a chip = cols;
insert_chip(column)
    find the highest index of a non-empty row in that column
    insert into that row

OPTIONAL METHOD
char get_disp()
// return character corresponding to square content (MIN,EMPTY,MAX)

METHOD
solve(State &st)
max_value = st.max_value()
if max_value != 0
    a player already won
if max_value == 0 && st.full()
    game ends in a draw
tuple<int,int,int> move = negamax(st);
move holds the best move for ai
make that move on input state.
return

so, overall flow of the program:
player_1 makes a move -> modifiy the game state
call solve(game state)
repeat until we have a winner


let us also store the total number of moves made in the game state. to determine a terminal value in view of
MAX, value = 10000 * rows * cols / moves;

track the number of three in a rows for MAX and MIN in the game state.


going back to the max_value() function logic
check the game state to see if we have a winner
we need to check horizontally, vertically and diagonally.

- - - - - - -
- - - - - - -
- - - - - - -
- - - o - o -
- - - x o x -
- - x o x x -
- - o x o o -
MAX wins~!


how can I get the number of open three in a rows for MAX/MIN?
iterate over the entire grid
if a cell is empty
    case 1: cell is in the middle of an open three in a row along the main diagonal
    case 2: cell is in the middle of an open three in a row along the secondary diagonal
    case 3: cell forms an open three in a row along the bottom-right diagonal
    case 4: cell forms an open three in a row along the bottom-left diagonal
    case 5: cell forms an open three in a row along the top-left diagonal
    case 6: cell forms an open three in a row along the top-right diagonal
    case 7: cell is in the middle of an open three in a row horizontally
    case 8: cell is in the middle of an open three in a row vertically
    case 9: cell forms an open three in a row to the right
    case 10: cell forms an open three in a row to the left
    case 11: cell forms an open three in row to the top
    case 12: cell forms an open three in row to the bottom

    if either of the 12 cases is true:
        increment count_three_consec


I need to be checking for draw.
we have a draw if moves_made == board size


references:
1. https://github.com/stratzilla/connect-four


TootAndOtto
player_1 tries to spell TOOT and player_2 tries to spell OTTO.